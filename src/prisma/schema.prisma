// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id_shop Int @id @default(autoincrement())
  name String
  cnpj String @unique
  password String
  email String @unique
  phone String
  fundation_date DateTime?
  cep String
  street String
  address_number Int
  id_city Int
  city City @relation(fields: [id_city], references: [id_city])
  complement String?
  lat Float
  long Float
  delivery_value Float?
  opened Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  account_status String @default("Active")
  products Product[]
  orders Order[]
  analytics Analytcs[]
}

model Client {
  id_client Int @id @default(autoincrement())
  name String
  username String
  password String
  cpf String @unique
  email String @unique
  phone String?
  date_of_birth DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  account_status String @default("Active")
  orders Order[]
  addresses Address[]
}

model Address {
  id_address Int @id @default(autoincrement())
  name String?
  cep String
  street String
  address_number Int
  complement String?
  id_city Int
  city City @relation(fields: [id_city], references: [id_city])
  lat Float
  long Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_client Int
  client Client @relation(fields: [id_client], references: [id_client])
}

model City {
  id_city Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_state Int
  state State @relation(fields: [id_state], references: [id_state])
  addresses Address[]
  shops Shop[]
}

model State {
  id_state Int @id @default(autoincrement())
  name String
  state_code String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_country Int
  country Country @relation(fields: [id_country], references: [id_country])
  cities City[]
}

model Country {
  id_country Int @id @default(autoincrement())
  name String
  country_code String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  states State[]
}

model Product {
  id_product Int @id @default(autoincrement())
  name String
  description String
  price Float
  category String
  manucafturer String
  serial_number String?
  stock Int
  lenght Float
  width Float
  height Float
  weight Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_shop Int
  shop Shop @relation(fields: [id_shop], references: [id_shop])
  order_products OrderProduct[]
}

model Order {
  id_order Int @id @default(autoincrement())
  status String?
  observations String?
  delivery_value Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_shop Int
  shop Shop @relation(fields: [id_shop], references: [id_shop])
  id_client Int
  client Client @relation(fields: [id_client], references: [id_client])
  order_products OrderProduct[]
}

model OrderProduct {
  id_order_product Int @id @default(autoincrement())
  amount Int
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_order Int
  id_product Int
  order Order @relation(fields: [id_order], references: [id_order])
  product Product @relation(fields: [id_product], references: [id_product])
}

model Analytcs {
  id_alytics Int @id @default(autoincrement())
  total_sales Float?
  total_sales_last_year Float?
  total_sales_last_semester Float?
  total_sales_last_month Float?
  total_sales_last_week Float?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id_shop Int
  shop Shop @relation(fields: [id_shop], references: [id_shop])
}
